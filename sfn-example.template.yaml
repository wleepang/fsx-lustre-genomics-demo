---
AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  (WWPS-GLS-WF-SFN-EXAMPLE) Creates the complete set of resources needed to run
  genomics workflows using AWS Step-Functions on AWS Batch

Mappings:
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "step-functions"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "step-functions"

Parameters:
  S3BucketName:
    Description: S3 bucket you are using for workflow inputs and outputs
    Type: String
  
  BatchJobQueue:
    Description: Name or ARN of the AWS Batch Job Queue the workflow will use by default
    Type: String


Resources:
  IAMCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      
      Policies:
        - PolicyName: !Sub codebuild-ecr-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - "ecr:CreateRepository"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:CompleteLayerUpload"
                - "ecr:GetAuthorizationToken"
                - "ecr:InitiateLayerUpload"
                - "ecr:PutImage"
                - "ecr:UploadLayerPart"
        - PolicyName: !Sub codebuild-logs-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

  IAMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: !Sub codebuild-access-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: "*"
        - PolicyName: !Sub states-access-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:ListStateMachines"
                  - "states:DescribeStateMachine"
                  - "states:DescribeStateMachineForExecution"
                  - "states:StartExecution"
                  - "states:ListExecutions"
                  - "states:DescribeExecution"
                  - "states:StopExecution"
                  - "states:GetExecutionHistory"
                Resource: "*"

  IAMStepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub states-access-policy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "batch:SubmitJob"
                  - "batch:DescribeJobs"
                  - "batch:TerminateJob"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForBatchJobsRule"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub
        - sfn-genomics-workflow-tools-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      Description: >-
        Builds containers for example step-functions genomics workflow
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:1.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: True

      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              pre_build:
                commands:
                  - echo "Docker Login to ECR"
                  - $(aws ecr get-login --no-include-email --region ${AWS::Region})
                  - echo "Creating ECR image repositories"
                  - aws ecr create-repository --repository-name bwa || true
                  - aws ecr create-repository --repository-name samtools || true
                  - aws ecr create-repository --repository-name bcftools || true
                  - echo "Getting source code from Github"
                  - git clone https://github.com/wleepang/fsx-lustre-genomics-demo.git
                  - cd aws-genomics-workflows
              build:
                commands:
                  - echo "Building containers"
                  - ROOT="$(pwd)/containers"
                  - cd $ROOT/bwa && ./build.sh
                  - cd $ROOT/samtools && ./build.sh
                  - cd $ROOT/bcftools && ./build.sh
              post_build:
                commands:
                  - echo "Tagging container images"
                  - docker tag bwa:aws ${REGISTRY}/bwa:aws
                  - docker tag samtools:aws ${REGISTRY}/samtools:aws
                  - docker tag bcftools:aws ${REGISTRY}/bcftools:aws
                  - echo "Pushing container images to ECR"
                  - docker push ${REGISTRY}/bwa:aws
                  - docker push ${REGISTRY}/samtools:aws
                  - docker push ${REGISTRY}/bcftools:aws
          - REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

      Tags: !FindInMap ["TagMap", "default", "tags"]
  
  CodeBuildInvocation:
    Type: Custom::CodeBuildInvocation
    Properties:
      ServiceToken: !GetAtt CodeBuildInvocationFunction.Arn
      BuildProject: !Ref CodeBuildProject
  
  CodeBuildInvocationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt IAMLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 600
      Code:
        ZipFile: |
          from time import sleep

          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ("Create", "Update"):
                  codebuild = boto3.client('codebuild')
                  build = codebuild.start_build(
                      projectName=event["ResourceProperties"]["BuildProject"]
                  )['build']
                          
                  id = build['id']
                  status = build['buildStatus']
                  while status == 'IN_PROGRESS':
                      sleep(10)
                      build = codebuild.batch_get_builds(ids=[id])['builds'][0]
                      status = build['buildStatus']
                  
                  if status != "SUCCEEDED":
                      cfnresponse.send(event, context, cfnresponse.FAILED, None)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, None)

  LambdaWorkflowSubmissionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt IAMLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 600
      Code:
        ZipFile: |
          import json
          import uuid

          import boto3

          def handler(event, context):

              sfn = boto3.client('stepfunctions')

              workflow_name = event['workflow_name']
              execution_id = str(uuid.uuid4())

              machines = {
                  machine['name']: machine['stateMachineArn']
                  for machine in sfn.list_state_machines(maxResults=1000)
              }

              # this injects the workflow_name and execution_id as environment variables
              # to be passed in as ContainerOverrides to Batch Job Submissions
              def object_hook(obj):
                  if 'resources' in obj:
                      obj['resources'].update({
                          "Environment": [
                              { "Name": "WORKFLOW_NAME", "Value": workflow_name },
                              { "Name": "EXECUTION_ID", "Value": execution_id }
                          ]
                      })
                  return obj
              
              workflow_input = json.loads(event['input'], object_hook=object_hook)
              workflow_input.update(
                  workflow_name=workflow_name,
                  execution_id=execution_id
              )

              response = sfn.start_execution(
                  stateMachineArn=machines[workflow_name], 
                  name=workflow_input['execution_id'],
                  input=json.dumps(workflow_input)
              )

              # make the response json serializble
              response.update(startDate=str(response['startDate']))

              return response
  
  BatchJobDefFSxLustreLfs:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: fsx-lustre-lfs
      Type: container
      Parameters:
        working_path: /scratch/working
      ContainerProperties:
        Image: amazonlinux:2
        Vcpus: 2
        Memory: 8000
        Command:
          - bash
          - -c
          - find Ref::working_path -type f -print0 | xargs -0 -n 1 lfs hsm_archive
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
          - Host:
              SourcePath: /usr/bin/lfs
            Name: lfs-cli
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch
          - ContainerPath: /usr/bin/lfs
            SourceVolume: lfs-cli
        
  BatchJobDefBwa:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bwa
      Type: container
      Parameters:
        command: mem
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
        input_path: "./data"
      
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws
        Vcpus: 8
        Memory: 64000
        Command:
          - Ref::command
          - Ref::reference_name
          - Ref::sample_id
          - Ref::input_path
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch
      
  BatchJobDefSamtools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: samtools
      Type: container
      Parameters:
        command: sort
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
      
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws
        Vcpus: 8
        Memory: 32000
        Command:
          - Ref::command
          - Ref::reference_name
          - Ref::sample_id
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch

  BatchJobDefBcftools:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: bcftools
      Type: container
      Parameters:
        command: mpileup
        reference_name: "Homo_sapiens_assembly38"
        sample_id: "NIST7035"
      
      ContainerProperties:
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws
        Vcpus: 8
        Memory: 32000
        Command:
          - Ref::command
          - Ref::reference_name
          - Ref::sample_id
        Volumes:
          - Host:
              SourcePath: /scratch
            Name: scratch
        MountPoints:
          - ContainerPath: /scratch
            SourceVolume: scratch

  SfnStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub
        - example-genomics-workflow-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      RoleArn: !GetAtt IAMStepFunctionsExecutionRole.Arn
      Tags: !FindInMap ["TagMap", "default", "tags"]
      DefinitionString: !Sub |-
        {
            "Comment": "Simple Genomics Workflow",
            "StartAt": "BwaMem",
            "States": {
                "BwaMem": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bwa.mem.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bwa-mem",
                        "JobDefinition": "${BatchJobDefBwa}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bwa.mem.parameters",
                        "ContainerOverrides.$": "$.bwa.mem.resources"
                    },
                    "Next": "SamtoolsSort"
                },
                "SamtoolsSort": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.samtools.sort.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-sort",
                        "JobDefinition": "${BatchJobDefSamtools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.samtools.sort.parameters",
                        "ContainerOverrides.$": "$.samtools.sort.resources"
                    },
                    "Next": "SamtoolsIndex"
                },
                "SamtoolsIndex": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.samtools.index.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "samtools-index",
                        "JobDefinition": "${BatchJobDefSamtools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.samtools.index.parameters",
                        "ContainerOverrides.$": "$.samtools.index.resources"
                    },
                    "Next": "BcftoolsMPileup"
                },
                "BcftoolsMPileup": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bcftools.mpileup.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-mpileup",
                        "JobDefinition": "${BatchJobDefBcftools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bcftools.mpileup.parameters",
                        "ContainerOverrides.$": "$.bcftools.mpileup.resources"
                    },
                    "Next": "BcftoolsCall"
                },
                "BcftoolsCall": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.bcftools.call.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "bcftools-call",
                        "JobDefinition": "${BatchJobDefBcftools}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.bcftools.call.parameters",
                        "ContainerOverrides.$": "$.bcftools.call.resources"
                    },
                    "Next": "LfsHsmArchive"
                },
                "LfsHsmArchive": {
                    "Type": "Task",
                    "InputPath": "$",
                    "ResultPath": "$.lfs.hsm_archive.result",
                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                    "Parameters": {
                        "JobName": "lfs-hsm_archive",
                        "JobDefinition": "${BatchJobDefFSxLustreLfs}",
                        "JobQueue.$": "$.defaults.queue",
                        "Parameters.$": "$.lfs.hsm_archive.parameters",
                        "ContainerOverrides.$": "$.lfs.hsm_archive.resources"
                    },
                    "End": true
                }
            }
        }

Outputs:
  BwaContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bwa:aws
  
  SamtoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/samtools:aws
  
  BcftoolsContainerImage:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bcftools:aws

  BwaJobDefinition:
    Value: !Ref BatchJobDefBwa
  
  SamtoolsJobDefinition:
    Value: !Ref BatchJobDefSamtools
  
  BcftoolsJobDefinition:
    Value: !Ref BatchJobDefBcftools
  
  LsfJobDefinition:
    Value: !Ref BatchJobDefFSxLustreLfs
  
  LambdaWorkflowSubmissionFunction:
    Value: !Ref LambdaWorkflowSubmissionFunction
    Description: >-
      Lambda function to use to execute workflows.  You need to use this function
      since it customizes the inputs for the state-machine execution, injecting
      workflow name and execution id.
  StateMachine:
    Value: !Ref SfnStateMachine
    Description: Step-functions state-machine that demonstrates a simple genomics workflow
  
  StateMachineInput:
    Description: Example input for the state machine
    Value: !Sub |
      {
          "workflow_name": null,
          "execution_id": null,
          "defaults": {
              "queue": "${BatchJobQueue}"
          },
          "bwa": {
              "mem": {
                  "parameters": {
                      "reference_name": "Homo_sapiens_assembly38",
                      "sample_id": "NIST7035",
                      "input_path": "./data",
                      "command": "mem"
                  },
                  "resources": {
                      "Vcpus": 8,
                      "Memory": 64000
                  }
              }
          },
          "samtools": {
              "sort": {
                  "parameters": {
                      "reference_name": "Homo_sapiens_assembly38",
                      "sample_id": "NIST7035",
                      "command": "sort"
                  },
                  "resources": {
                      "Vcpus": 8,
                      "Memory": 32000
                  }
              },
              "index": {
                  "parameters": {
                      "reference_name": "Homo_sapiens_assembly38",
                      "sample_id": "NIST7035",
                      "command": "index"
                  },
                  "resources": {
                      "Vcpus": 8,
                      "Memory": 32000
                  }
              }
          },
          "bcftools": {
              "mpileup": {
                  "parameters": {
                      "reference_name": "Homo_sapiens_assembly38",
                      "sample_id": "NIST7035",
                      "command": "mpileup"
                  },
                  "resources": {
                      "Vcpus": 8,
                      "Memory": 32000
                  }
              },
              "call": {
                  "parameters": {
                      "reference_name": "Homo_sapiens_assembly38",
                      "sample_id": "NIST7035",
                      "command": "call"
                  },
                  "resources": {
                      "Vcpus": 8,
                      "Memory": 32000
                  }
              }
          },
          "lsf": {
              "hsm_archive": {
                  "parameters": {
                      "working_path": "/scratch/working"
                  },
                  "resources": {
                      "Vcpus": 2,
                      "Memory": 8000
                  }
              }
          }
      }
...